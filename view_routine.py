
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'view_routine.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from main_workout import Ui_main_workout
import json

class Ui_view_routine(object):
    def setupUi(self, view_routine, program, difficulty):
        
        #Gets data of difficulty and program
        self.difficulty = difficulty
        self.program = program

        #Assigns view_routine to Ui_view_routine class
        self.win = view_routine

        view_routine.setObjectName("view_routine")
        view_routine.setWindowModality(QtCore.Qt.WindowModal)
        view_routine.resize(412, 732)
        self.centralwidget = QtWidgets.QWidget(view_routine)
        self.centralwidget.setObjectName("centralwidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-10, 60, 431, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.main_label = QtWidgets.QLabel(self.centralwidget)
        self.main_label.setGeometry(QtCore.QRect(170, 20, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins Light")
        font.setPointSize(10)
        self.main_label.setFont(font)
        self.main_label.setObjectName("main_label")

        # Create a QListWidget
        self.list_widget = QtWidgets.QListWidget(self.centralwidget)
        self.list_widget.setGeometry(QtCore.QRect(0, 60, 412, 561))
        self.list_widget.setObjectName("list_widget")

        try:
            self.list_widget.addItems([self.read_program()])
        except:
            self.list_widget.addItems(['Error', 'No', 'File', 'Read'])

        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(0, 680, 421, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.proceed = QtWidgets.QPushButton(self.centralwidget)
        self.proceed.setGeometry(QtCore.QRect(200, 630, 201, 51))
        font = QtGui.QFont()
        font.setFamily("Poppins Light")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.proceed.setFont(font)
        self.proceed.setObjectName("proceed")

        self.proceed.clicked.connect(self.proceed_workout)

        self.back_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_button.setGeometry(QtCore.QRect(10, 650, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(10)
        self.back_button.setFont(font)
        self.back_button.setObjectName("back_button")

        self.back_button.clicked.connect(self.cancel)

        view_routine.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(view_routine)
        self.statusbar.setObjectName("statusbar")
        view_routine.setStatusBar(self.statusbar)

        self.retranslateUi(view_routine)
        QtCore.QMetaObject.connectSlotsByName(view_routine)

    #Method to store the name of each workout in a program_JSON file and add it to list_widget
    def read_program(self):

        #Stores 'names' data in list workout_names
        workout_names = []
        self.filepath = None #Flag Case. File path of JSON. Example: "program_files/beginner/arms.json"
        self.workout_type = None #Flag Case. Type of workout. Example: "beginner_arms"
        
        #Define the mapping between difficulty levels and workout types.
        #I used a dictionary to avoid making an if else ladder.
        #View the enormously large if else aldder at: https://github.com/tarikuzuma/RamFit/commit/7b4bc9d98e81605c300423242bf2e75d744254e2
        difficulty_mapping = {
            1: "beginner",      #For Beginner Workouts
            2: "intermediate",  #For Intermediate Workouts
            3: "advanced"       #For Advanced Workouts
        }

        #Check if the difficulty level is valid
        if self.difficulty in difficulty_mapping:
            #Construct the workout type
            self.workout_type = f"{difficulty_mapping[self.difficulty]}_{self.program}"

            #Construct the file path
            #Stored in self to keep it as a persistent datatype. For Inter Module Commmunication
            self.filepath = f"program_files/{difficulty_mapping[self.difficulty]}/{self.program}.json"
            #Print the appropriate message based on the difficulty level and program
            print(f"{difficulty_mapping[self.difficulty].capitalize()}, {self.program} day")
        else:
            print("Unreadable")
            return

        print ("File path: ", self.filepath, "\nKey:", self.workout_type)

        try:
            with open(self.filepath, "r") as f:
                json_object = json.load(f)
                #print ("\n",json_object,"\n") #Debug to read what JSON read.
                workout = json_object[self.workout_type]

                #Print the name of each exercise in the workout
                for exercise in workout:
                    exercise_name = exercise["name"]
                    workout_names.append(exercise_name) #Appends exercises_name to workout_names list

        except FileNotFoundError:
            #Code to crash view_routine to display file error not found.
            #Temporary Solution. If file not found, annd user presses "Let's Go," program will crash.
            print("File not found:", self.filepath)
            print("It has either been deleted or data has not been created yet.")
            x = 5/0
            print(x)

        except json.JSONDecodeError:
            print("Invalid JSON format in file:", self.filepath)

        #Adds list of names into list_widget
        print ("Workouts include: ", *workout_names, sep=", ")
        self.list_widget.addItems([*workout_names])
    
    #Debugging purposes: Check if Button works. Check if dififculty and program is recorded
    def printBoth(self):
        self.read_program()
        print("Hello World: ", self.difficulty, self.program)

    def proceed_workout(self):
        #self.read_program()
        print("Hello World: ", self.difficulty, self.program)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_main_workout()
        self.ui.setupUi(self.window, 0, self.filepath, self.workout_type)
        #self.ui.run_window()
        self.window.show()
        self.win.close()
        
    def cancel(self):
        print("\nGoing back to main menu...\n")
        self.win.close()
        
    def retranslateUi(self, view_routine):
        _translate = QtCore.QCoreApplication.translate
        view_routine.setWindowTitle(_translate("view_routine", "MainWindow"))
        self.main_label.setText(_translate("view_routine", "Workout"))
        self.proceed.setText(_translate("view_routine", "Let\'s Go!"))
        self.back_button.setText(_translate("view_routine", "Back"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    view_routine = QtWidgets.QMainWindow()
    ui = Ui_view_routine()
    ui.setupUi(view_routine)
    view_routine.show()
    sys.exit(app.exec_())